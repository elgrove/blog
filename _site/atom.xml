<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Colorie</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <link href="http://localhost:4000/"/>
 <updated>2021-11-26T17:15:06+00:00</updated>
 <id>http://localhost:4000</id>
 <author>
   <name>Colorie</name>
   <email></email>
 </author>

 
 <entry>
   <title>LAN Speed Testing with iperf</title>
   <link href="http://localhost:4000/2020/06/12/lan-speed-testing"/>
   <updated>2020-06-12T00:00:00+01:00</updated>
   <id>http://localhost:4000/2020/06/12/lan-speed-testing</id>
   <content type="html">&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iperf&lt;/code&gt; is a command line tool for *nix machines that can set up a server-client connection over the LAN to transfer as much data as possible in ten seconds flat, and thus measure the speed of the connection.&lt;/p&gt;

&lt;p&gt;Using this tool I found out that my 5GHz wifi band (370Mbps) is three times faster than the TP-Link powerline tool (93Mbps) I had been using previously, and a massive 23x faster than the 2.4GHz band (16Mbps)!&lt;/p&gt;

&lt;p&gt;I think this is in large part due to the TP-Link Archer C2300 router I bought when we moved in, it was only £90 and is a huge upgrade on whatever your ISP gave you.&lt;/p&gt;

&lt;p&gt;```bash&lt;/p&gt;
&lt;h1 id=&quot;linux&quot;&gt;linux&lt;/h1&gt;
&lt;p&gt;sudo apt install iperf&lt;/p&gt;
&lt;h1 id=&quot;macos&quot;&gt;macos&lt;/h1&gt;
&lt;p&gt;brew install iperf&lt;/p&gt;

&lt;h1 id=&quot;on-server&quot;&gt;on server&lt;/h1&gt;
&lt;p&gt;iperf -s&lt;/p&gt;

&lt;h1 id=&quot;on-client&quot;&gt;on client&lt;/h1&gt;
&lt;p&gt;iperf -c 10.0.0.x -p port&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Setting up a Windows 10 VM on Proxmox</title>
   <link href="http://localhost:4000/2020/06/01/windows-10-vm"/>
   <updated>2020-06-01T00:00:00+01:00</updated>
   <id>http://localhost:4000/2020/06/01/windows-10-vm</id>
   <content type="html">&lt;p&gt;Proxmox makes it very easy to set up Linux VMs, but to do the same for Windows 10, unfortunately you have to jump through a few hoops.&lt;/p&gt;

&lt;p&gt;Firstly, procure your Windows 10 ISO. I prefer the LTSC channel, but it doesn’t have the Windows Subsystem for Linux version 2 yet, which is a damn shame. LTSC does away with all the commercial nonsense that Microsoft have added to the Home and Pro versions of Windows 10, like Candy Crush for example. If you want to be able to use WSL2, you will have to obtain an ISO for Windows 10 Pro.&lt;/p&gt;

&lt;p&gt;Once you’ve uploaded the ISO to Proxmox, you can begin creating a new VM.&lt;/p&gt;

&lt;p&gt;In the first screen, name your VM and give it a unique numerical ID as usual. In the OS tab, select the Windows ISO that you uploaded and change the guest OS type to ‘Windows 10/2016/2019’&lt;/p&gt;

&lt;p&gt;Moving on to the hard disk tab, change the bus to SCSI and set VirtIO SCSI as the controller. For the cache, Proxmox recommends using ‘write back’ for best performance, but the default, no cache, is safer, with the trade-off that it is slower.&lt;/p&gt;

&lt;p&gt;No changes needed in the CPU tab, though I would recommend assigning at least 2 virtual CPUs to Windows. Same in the memory tab, just assign your memory size as usual. Lastly, select ‘VirtIO (paravirtualized)’ as the network device. Confirm the setup of the VM and make sure that ‘start after creation’ is unticked.&lt;/p&gt;

&lt;p&gt;Before booting up the VM, you will need to add another disk to the VM that contains the VirtIO drivers needed for Windows to recognise the virtual drives, memory and network device. I usually grab the disk image containing these drivers from the GitHub page here: https://github.com/virtio-win. Upload this ISO to your Proxmox server, locate the Windows VM you just created and add the ISO as another CD/DVD drive just as the Windows 10 ISO is.&lt;/p&gt;

&lt;p&gt;Boot up the Windows VM and open the noVNC console window. If you’ve ever installed Windows 10 before you will be familiar with this particular shade of purple. Click through to the page where you need to select the drive to install Windows 10 on, and click ‘load driver’. Unfortunately you are going to have to do this one driver at a time. Firstly, the hard disk, browse to the VirtIO ISO and navigate to the folder vioscsi/w10/amd64 (assuming you are installing on an x86 box) and click confirm. Windows should have recognised your ‘Red Hat VirtIO SCSI passthrough controller’. The virtual hard drive should now appear, but don’t install on it yet. Next, for the network device, navigate to NetKVM/w10/amd64 and click confirm as before. Lastly, for the memory device, navigate to Balloon/w10/amd64 and proceed.&lt;/p&gt;

&lt;p&gt;Now all the relevant drivers have been installed you can go ahead with the install to the VM’s virtual hard drive. Everything else from this point is the usual process of doing a fresh Windows 10 install, including opting out of all the telemetry and other rubbish!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Title</title>
   <link href="http://localhost:4000/2001/01/01/template"/>
   <updated>2001-01-01T00:00:00+00:00</updated>
   <id>http://localhost:4000/2001/01/01/template</id>
   <content type="html">
</content>
 </entry>
 

</feed>
